
/*
This file was generated by Arp.Generator
*/
#region Imports

using JetBrains.ProjectModel;
using JetBrains.ReSharper.Psi;
using JetBrains.ReSharper.Psi.Caches;
using JetBrains.ReSharper.Psi.ExtensionsAPI;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve;
using JetBrains.ReSharper.Psi.Xml.Tree;
using JetBrains.ReSharper.Psi.Xml.Impl.Tree;
using System.Collections.Generic;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
#endregion

namespace Arp.NH.Psi.Tree.Impl
{
    public partial class HibernateMappingElementImpl : XmlTag,  IHibernateMappingElement, IScope
    {
        #region IScope Members

        public IScope GetParentScope()
        {
            return SharedImplUtil.GetParentScopeOnTree(this);
        }

        public void AddGlobalDeclarations(IWritableSymbolTable table, int level)
        {
            // add declarations from projec t and project references
            IProject project = this.GetProject();
            if (project != null)
            {
                table.DependencySet.AddNamespaceQualifierDependency("", project);
                IEnumerable<IDeclaredElement> elementsFromCache = this.GetManager().GetDeclarationsCache(DeclarationsCacheScope.ProjectScope(project, true), true).GetElementsAtQualifiedName(string.Empty);
                foreach (IDeclaredElement declaredElement in elementsFromCache)
                {
                    table.AddSymbol(declaredElement, declaredElement.IdSubstitution, this, level);
                }
            }
        }

        public void AddDeclarationsBeforeElement(IWritableSymbolTable table, IElement element, int level)
        {
            // do nothing
        }

        public void AddDeclarationsAfterElement(IWritableSymbolTable table, IElement element, int level)
        {
            // do nothing
        }

        public int LevelDelta
        {
            get { return 1; }
        }

        #endregion
    }
}
