
/*
This file was generated by Arp.Generator
*/
#region Imports
using JetBrains.ReSharper.Psi.Xml.Tree;
using JetBrains.ReSharper.Psi.Xml.Impl.Tree;
using System.Collections.Generic;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
#endregion

namespace Arp.NH.Psi.Tree.Impl
{
    public partial class NestedCompositeElementElementImpl : XmlTag,  INestedCompositeElementElement
    {

        #region Role ids

        private const int Parent_ROLE_ID = 1;

        private const int Properties_ROLE_ID = 2;

        private const int ManyToOnes_ROLE_ID = 3;

        private const int NestedCompositeElements_ROLE_ID = 4;

        #endregion

        #region Constructor 

        public NestedCompositeElementElementImpl() : base(ElementType.NestedCompositeElementElementImpl_ELEMENT) {}

        #endregion

        #region Attributes


        public IXmlAttribute ClassAttribute 
        {
            get
            {
                return base.GetAttribute("class");
            }
        }

        public IXmlAttribute NameAttribute 
        {
            get
            {
                return base.GetAttribute("name");
            }
        }

        public IXmlAttribute AccessAttribute 
        {
            get
            {
                return base.GetAttribute("access");
            }
        }

        #endregion

        #region Elements


        public IParentElement Parent
        {
            get
            {
                return (IParentElement)FindChildByRole(Parent_ROLE_ID);
            }
        }

        public ICollection<IPropertyElement> Properties
        { 
            get
            { 
                return base.FindListOfChildrenByRole<IPropertyElement>(Properties_ROLE_ID);
            } 
        }

        public ICollection<IManyToOneElement> ManyToOnes
        { 
            get
            { 
                return base.FindListOfChildrenByRole<IManyToOneElement>(ManyToOnes_ROLE_ID);
            } 
        }

        public ICollection<INestedCompositeElementElement> NestedCompositeElements
        { 
            get
            { 
                return base.FindListOfChildrenByRole<INestedCompositeElementElement>(NestedCompositeElements_ROLE_ID);
            } 
        }


        #endregion

 

        public override short GetChildRole(TreeElement child)
        {

                if (child is IParentElement && ((XmlTag)child).TagName == "parent")
                    return Parent_ROLE_ID;
                else 
                
                if (child is IPropertyElement && ((XmlTag)child).TagName == "property")
                    return Properties_ROLE_ID;
                else 
                
                if (child is IManyToOneElement && ((XmlTag)child).TagName == "many-to-one")
                    return ManyToOnes_ROLE_ID;
                else 
                
                if (child is INestedCompositeElementElement && ((XmlTag)child).TagName == "nested-composite-element")
                    return NestedCompositeElements_ROLE_ID;
                else 
                
        return base.GetChildRole(child);
        }
    }
}
