
/*
This file was generated by Arp.Generator
*/
#region Imports
using JetBrains.ReSharper.Psi.Xml.Tree;
using JetBrains.ReSharper.Psi.Xml.Impl.Tree;
using System.Collections.Generic;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
#endregion

namespace Arp.NH.Psi.Tree.Impl
{
    public partial class HibernateMappingElementImpl : XmlTag,  IHibernateMappingElement
    {

        #region Role ids

        private const int Meta_ROLE_ID = 1;

        private const int Import_ROLE_ID = 2;

        private const int Classs_ROLE_ID = 3;

        private const int Subclasss_ROLE_ID = 4;

        private const int JoinedSubclasss_ROLE_ID = 5;

        private const int Resultset_ROLE_ID = 6;

        private const int Querys_ROLE_ID = 7;

        private const int SqlQuerys_ROLE_ID = 8;

        private const int FilterDef_ROLE_ID = 9;

        private const int DatabaseObject_ROLE_ID = 10;

        #endregion

        #region Constructor 

        public HibernateMappingElementImpl() : base(ElementType.HibernateMappingElementImpl_ELEMENT) {}

        #endregion

        #region Attributes


        public IXmlAttribute SchemaAttribute 
        {
            get
            {
                return base.GetAttribute("schema");
            }
        }

        public IXmlAttribute DefaultCascadeAttribute 
        {
            get
            {
                return base.GetAttribute("default-cascade");
            }
        }

        public IXmlAttribute DefaultAccessAttribute 
        {
            get
            {
                return base.GetAttribute("default-access");
            }
        }

        public IXmlAttribute AutoImportAttribute 
        {
            get
            {
                return base.GetAttribute("auto-import");
            }
        }

        public IXmlAttribute NamespaceAttribute 
        {
            get
            {
                return base.GetAttribute("namespace");
            }
        }

        public IXmlAttribute AssemblyAttribute 
        {
            get
            {
                return base.GetAttribute("assembly");
            }
        }

        public IXmlAttribute DefaultLazyAttribute 
        {
            get
            {
                return base.GetAttribute("default-lazy");
            }
        }

        #endregion

        #region Elements


        public IMetaElement Meta
        {
            get
            {
                return (IMetaElement)FindChildByRole(Meta_ROLE_ID);
            }
        }

        public IImportElement Import
        {
            get
            {
                return (IImportElement)FindChildByRole(Import_ROLE_ID);
            }
        }

        public ICollection<IClassElement> Classs
        { 
            get
            { 
                return base.FindListOfChildrenByRole<IClassElement>(Classs_ROLE_ID);
            } 
        }

        public ICollection<ISubclassElement> Subclasss
        { 
            get
            { 
                return base.FindListOfChildrenByRole<ISubclassElement>(Subclasss_ROLE_ID);
            } 
        }

        public ICollection<IJoinedSubclassElement> JoinedSubclasss
        { 
            get
            { 
                return base.FindListOfChildrenByRole<IJoinedSubclassElement>(JoinedSubclasss_ROLE_ID);
            } 
        }

        public IResultsetElement Resultset
        {
            get
            {
                return (IResultsetElement)FindChildByRole(Resultset_ROLE_ID);
            }
        }

        public ICollection<IQueryElement> Querys
        { 
            get
            { 
                return base.FindListOfChildrenByRole<IQueryElement>(Querys_ROLE_ID);
            } 
        }

        public ICollection<ISqlQueryElement> SqlQuerys
        { 
            get
            { 
                return base.FindListOfChildrenByRole<ISqlQueryElement>(SqlQuerys_ROLE_ID);
            } 
        }

        public IFilterDefElement FilterDef
        {
            get
            {
                return (IFilterDefElement)FindChildByRole(FilterDef_ROLE_ID);
            }
        }

        public IDatabaseObjectElement DatabaseObject
        {
            get
            {
                return (IDatabaseObjectElement)FindChildByRole(DatabaseObject_ROLE_ID);
            }
        }


        #endregion

 

        public override short GetChildRole(TreeElement child)
        {

                if (child is IMetaElement && ((XmlTag)child).TagName == "meta")
                    return Meta_ROLE_ID;
                else 
                
                if (child is IImportElement && ((XmlTag)child).TagName == "import")
                    return Import_ROLE_ID;
                else 
                
                if (child is IClassElement && ((XmlTag)child).TagName == "class")
                    return Classs_ROLE_ID;
                else 
                
                if (child is ISubclassElement && ((XmlTag)child).TagName == "subclass")
                    return Subclasss_ROLE_ID;
                else 
                
                if (child is IJoinedSubclassElement && ((XmlTag)child).TagName == "joined-subclass")
                    return JoinedSubclasss_ROLE_ID;
                else 
                
                if (child is IResultsetElement && ((XmlTag)child).TagName == "resultset")
                    return Resultset_ROLE_ID;
                else 
                
                if (child is IQueryElement && ((XmlTag)child).TagName == "query")
                    return Querys_ROLE_ID;
                else 
                
                if (child is ISqlQueryElement && ((XmlTag)child).TagName == "sql-query")
                    return SqlQuerys_ROLE_ID;
                else 
                
                if (child is IFilterDefElement && ((XmlTag)child).TagName == "filter-def")
                    return FilterDef_ROLE_ID;
                else 
                
                if (child is IDatabaseObjectElement && ((XmlTag)child).TagName == "database-object")
                    return DatabaseObject_ROLE_ID;
                else 
                
        return base.GetChildRole(child);
        }
    }
}
