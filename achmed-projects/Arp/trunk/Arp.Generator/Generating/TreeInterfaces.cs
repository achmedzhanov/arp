using System.IO;
using Antlr.StringTemplate;
using Arp.Common.Assertions;
using Arp.Generator.Names;
using Arp.Generator.Preprocessing;
using Arp.Generator.Preprocessing.Impl;

namespace Arp.Generator.Generating
{
    public class TreeInterfaces
    {
        public const string BASE =
            @"
group common;
ifcName(name) ::= <<I<name>
>>";

        public const string INTERFACE_DECLARATION =
@"
/*
This file was generated by Arp.Generator
*/
#region Imports
$usings:{u |using $u$;
}$
#endregion

namespace $namespace$
{
    public interface $ifcName(name=name )$ : IElement 
    {
        #region Attributes

$attributes:{a |            $a.type$ $a.name$ {get;}
}$
$end$
        #endregion

        #region Elements

$elements:{e |      $ifcName(name=e.type)$ $e.name$ {get;}
}$

$elementCollections:{e |        ICollection<$ifcName(name=e.type)$> $e.name$ {get;}
}$

        #endregion

$additional$ 
    }
}
";

        public const string PROPERTY_DECLARATION =
@"
        $type$ $name$
        {
            get;
        }
}";

        private IFilesWriter fileWriter;
        private INameConverter nameConverter;
        private IPluralProvider pluralProvider;


        public IFilesWriter FileWriter
        {
            get { return fileWriter; }
            set { fileWriter = value; }
        }


        public INameConverter NameConverter
        {
            get { return nameConverter; }
            set { nameConverter = value; }
        }


        public IPluralProvider PluralProvider
        {
            get { return pluralProvider; }
            set { pluralProvider = value; }
        }

        public void Generate(ITypeInfo typeGenerationInfo)
        {
            Assert.CheckNotNull(fileWriter);
            Assert.CheckNotNull(nameConverter);
            Assert.CheckNotNull(pluralProvider);

            StringTemplateGroup baseTemplateGroup = new StringTemplateGroup(new StringReader(BASE));
            StringTemplateGroup ifcTemplateGroup = new StringTemplateGroup("interface");
            ifcTemplateGroup.SuperGroup = baseTemplateGroup;
            ifcTemplateGroup.DefineTemplate("interface", INTERFACE_DECLARATION);
            StringTemplate stringTemplate = ifcTemplateGroup.GetInstanceOf("interface");

            //StringTemplate stringTemplate = new StringTemplate(INTERFACE_DECLARATION);

            stringTemplate.SetAttribute("namespace", "Arp.NH.Psi.Tree");
            string baseName = nameConverter.ConvertTypeName(typeGenerationInfo.BaseName);
            StringTemplate ifcNameInstance = ifcTemplateGroup.GetInstanceOf("ifcName");
            ifcNameInstance.SetAttribute("name", baseName);
            string ifcName = ifcNameInstance.ToString();
            stringTemplate.SetAttribute("name", baseName);
            foreach (IAttributeInfo info in typeGenerationInfo.AttributesInfo)
            {
                stringTemplate.SetAttribute("attributes.{type,name}", "IXmlAttribute", nameConverter.ConvertAttributeName(info.Name ));
            }

            foreach (INestedElementInfo nestedElementInfo in typeGenerationInfo.NestedElementsInfo)
            {
                if (!nestedElementInfo.IsCollection)
                {
                    stringTemplate.SetAttribute("elements.{type,name}", nameConverter.ConvertTypeName(nestedElementInfo.Element.TypeInfo.BaseName), 
                        nameConverter.ConvertAttributeName(nestedElementInfo.Element.Name));
                }
                else
                {
                    foreach (IElementInfo collectionElementInfo in nestedElementInfo.Elements)
                    {
                        string name = nameConverter.ConvertAttributeName(collectionElementInfo.Name);
                        name = pluralProvider.Plural(name);
                        stringTemplate.SetAttribute("elementCollections.{type,name}", nameConverter.ConvertTypeName(collectionElementInfo.TypeInfo.BaseName),
                            name);
                    }
                }
            }

            stringTemplate.SetAttribute("attitional", ";;");
            string ret = stringTemplate.ToString();
            fileWriter.Write(ifcName + ".cs", ret);
        }
    }
}